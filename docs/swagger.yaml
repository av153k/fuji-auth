basePath: /api/v1/user/
definitions:
  models.ResponseModel-any:
    properties:
      error:
        type: boolean
      message:
        type: string
      payload: {}
      status_code:
        type: integer
    type: object
  models.ResponseModel-models_User:
    properties:
      error:
        type: boolean
      message:
        type: string
      payload:
        $ref: '#/definitions/models.User'
      status_code:
        type: integer
    type: object
  models.User:
    properties:
      account_status:
        type: boolean
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_online:
        type: boolean
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      photo_url:
        type: string
      updated_at:
        type: string
      user_role:
        type: string
    type: object
host: localhost:5000
info:
  contact:
    email: av153k.dev@gmail.com
    name: Abhishek Anand
    url: http://www.github.com/av153k
  description: This is the auth microservice for Fuji.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fuji Auth Microservice
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: login a user and send tokens in response.
      parameters:
      - description: Email
        in: body
        name: email
        schema:
          type: string
      - description: Phone
        in: body
        name: phone
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseModel-models_User'
      summary: login a user and send tokens in response
      tags:
      - User
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Phone
        in: body
        name: phone
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: User role
        in: body
        name: user_role
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseModel-models_User'
      summary: create a new user
      tags:
      - User
  /status:
    get:
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseModel-any'
      summary: Show the status of server.
      tags:
      - Health
schemes:
- http
swagger: "2.0"
